
name: Main workflow

on: [push, pull_request]

jobs:

  all-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.11
      uses: actions/setup-java@v1
      with:
        java-version: 1.11

    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }} # hash poms
        restore-keys: ${{ runner.os }}-m2

    - name: Compile and run all tests
      run: mvn -B test


  build-generator:
    needs: all-tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.11
      uses: actions/setup-java@v1
      with:
        java-version: 1.11

    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }} # hash poms
        restore-keys: ${{ runner.os }}-m2

    - name: Standard compile
      run: mvn compile

    - name: Set up ant packaging
      run: ./pre-ant.sh
      shell: bash
      working-directory: ./dist/generator

    - name: Ant packaging
      run: ant -f antpack.xml
      working-directory: ./dist/generator

    - name: Store cli jar artifact
      uses: actions/upload-artifact@v1
      with:
        name: logic-compiler  # name of the artifact
        path: dist/generator/logic-compiler.jar

  build-web:
    needs: all-tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.11
      uses: actions/setup-java@v1
      with:
        java-version: 1.11

    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }} # hash poms
        restore-keys: ${{ runner.os }}-m2

    - name: Standard compile
      run: mvn compile

    - name: Set up ant packaging
      run: ./pre-ant.sh
      shell: bash
      working-directory: ./dist/web

    - name: Ant packaging
      run: ant -f antpack.xml
      working-directory: ./dist/web

    - name: Prep upload
      run: |
        mkdir -p output 
        mv logic-webserver.jar src/ output/
      working-directory: ./dist/web

    - name: Store web jar and public dir as artifact
      uses: actions/upload-artifact@v1
      with:
        name: logic-webserver  # name of the artifact
        path: dist/web/output
        
  hol-integration-tests:
    needs: build-generator
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.11
      uses: actions/setup-java@v1
      with:
        java-version: 1.11
    - name: Download compiler
      uses: actions/download-artifact@v2
      with:
        name: logic-compiler
        path: ./
    - name: Get sat4j
      run: wget http://download.forge.ow2.org/sat4j/sat4j-pb.jar -O sat4j.jar
    - name: Setup workspace 1
      run: cp -r za.org.cair.logic_app/src/test/resources/sat ./
    - name: Setup workspace 2
      working-directory: ./sat
      run: |
        ls -1 *.logic | while read line; do
          echo 'config solver="sat4j"' >> $line
        done
    - name: SAT4j part 1
      run: java -jar logic-compiler.jar sat/problem_sat.logic result.txt
    - name: Check for correct output 1
      run: diff result.txt sat/solution_sat.txt  # will fail if diffs
    - name: Quick cleanup
      run: rm result.txt
    - name: SAT4j part 2
      run: java -jar logic-compiler.jar sat/problem_unsat.logic result.txt
    - name: Check for correct output 2
      run: diff result.txt sat/solution_unsat.txt

  docker-web:
    needs: [hol-integration-tests, build-web]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Pull in artifacts from build jobs
      uses: actions/download-artifact@v2
      with:
        path: dist/

    - name: Docker login
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Docker Buildx setup
      id: buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: ${{ runner.os }}-buildx

    - name: Build and push (dev)
      if: github.ref != 'refs/heads/master'
      uses: docker/build-push-action@v2
      with:
        context: ./dist/
        push: true
        builder: ${{ steps.buildx.outputs.name }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache
        tags: ${{ secrets.DOCKER_HUB_PATH }}:dev

    - name: Build and push (master only)
      if: github.ref == 'refs/heads/master'
      uses: docker/build-push-action@v2
      with:
        context: ./dist/
        push: true
        builder: ${{ steps.buildx.outputs.name }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache
        tags:
        - ${{ secrets.DOCKER_HUB_PATH }}:latest 
        - ${{ secrets.DOCKER_HUB_PATH }}:stable


