grammar za.org.cair.logic_app.LogicLang with org.eclipse.xtext.common.Terminals

generate logicLang "http://www.cair.org.za/logic_app/LogicLang"
// URL is just a namespace.

Model hidden(WS, COMMENT): // own-line comments
	// & used to mean any ordering
	propositions+=Proposition* &
	commands+=Command* &
	config+=Config*
;


Proposition hidden(WS, COMMENT): // post-line comments
	'prop' sentence=Sentence
;

Sentence:
	Equivalence // will recurse down delegation chain
;

// How to deal with generic expressions:
// https://www.eclipse.org/Xtext/documentation/307_special_languages.html
// Summary: Avoid recursive definitions by specifying precedence
// by way of a "delegation chain" (top-down in this file)

// all rules here return Propositions, which ensures
// they produce AST's and not datatypes.
// Note where the precedence is the same, these rules are left-associative 

// The `operator` attribute is only used for checking variant type, not
// determining the operation.

Equivalence returns Sentence:
	Implication ({Equivalence.left=current} operator=('<->' | 'iff') right=Implication)*
;

Implication returns Sentence:
	Disjunction ({Implication.left=current} operator=('->' | 'implies') right=Disjunction)*
;

Disjunction returns Sentence:
	Conjunction ({Disjunction.left=current} operator=('|' | 'or') right=Conjunction)*
;

Conjunction returns Sentence:
	Primary ({Conjunction.left=current} operator=('&' | 'and') right=Primary)*
;

Primary returns Sentence: 
// either terminal, negation, or restart the delegation chain
	Boolean |
	({Negation} operator=('~' | 'not') expression=Primary) |
	'(' Equivalence ')'
;

Boolean:
	BooleanLiteral |
	BooleanVariable
;

BooleanVariable:
	name=ID // user-declared variable name
;
	
BooleanLiteral:
	truth=BooleanValuesEnum
; 
	
// ignore the warnings here. This is valid syntax.
enum BooleanValuesEnum: 
	TRUE = 'T' | TRUE = 'True' |
	FALSE = 'F' | FALSE = 'False'
;


// Commands =====
Command hidden(WS, COMMENT): // hidden() used to specify comments
	'cmd' (
		VariantTranslationCommand |
		ConversionCommand |
		SolveCommand |
		JustParseCommand
		// other commands go here
	) 
;

enum LogicLangVariant:
	SYMBOL_OP = 'symbol variant' | 
	RESWORD_OP = 'reserved word variant'
;
VariantTranslationCommand:
	'translate' 'to' variant=LogicLangVariant
;

enum ConversionDestination:
	CNF = 'CNF' |
	NNF = 'NNF' |
	DIMACS_CNF = 'DIMACS CNF'
;
ConversionCommand:
	'convert' 'to' destination=ConversionDestination
;

enum SolutionRequest:
	SATISFIABILITY = 'satisfiability'
;
SolveCommand:
	'solve' what=SolutionRequest
;

JustParseCommand:
	{JustParseCommand} 'just' 'parse'
;

// Configuration ===
enum ConfigKey:
	SOLVER = 'solver'
	// add more config keys here
	// TODO: perhaps output filename
;
Config hidden(WS, COMMENT):
	'config' key=ConfigKey '=' value=STRING
;


terminal COMMENT: // #-initiated, ending on a newline char
	'#' !('\n'|'\r')* ('\r'? '\n')?
;
