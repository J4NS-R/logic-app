/*
 * generated by Xtext 2.24.0
 */
package za.org.cair.logic_app.tests

import com.google.inject.Inject
import java.io.BufferedReader
import java.io.InputStreamReader
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import za.org.cair.logic_app.logicLang.Model
import za.org.cair.logic_app.logicLang.Implication
import static org.junit.Assert.assertThat
import static org.hamcrest.CoreMatchers.instanceOf
import za.org.cair.logic_app.logicLang.BooleanVariable
import za.org.cair.logic_app.logicLang.BooleanLiteral
import static org.junit.Assert.assertEquals
import za.org.cair.logic_app.logicLang.Disjunction
import za.org.cair.logic_app.logicLang.Conjunction
import za.org.cair.logic_app.logicLang.Negation
import za.org.cair.logic_app.logicLang.BooleanValuesEnum

@ExtendWith(InjectionExtension)
@InjectWith(LogicLangInjectorProvider)
class LogicLangParsingTest {
	@Inject
	ParseHelper<Model> parseHelper
	
	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
			prop (A) | ~(~C & ~D) -> (C|D) <-> A
			prop A or not (not C and not D) implies (C or D) iff A
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
		// println(dump(result, ""))
	}
	
	@Test
	def void parseBirdsVar1() {
		// symbols as operators example
		val result = parseHelper.parse(readTestFile("birds_var1.logic"))
		birdTester(result)
	}
	
	@Test
	def void parseBirdsVar2() {
		// reserved words as operators example
		val result = parseHelper.parse(readTestFile("birds_var2.logic"))
		birdTester(result)
	}
	
	def void birdTester(Model result){
		// 6 propositions defined
		Assertions.assertEquals(6, result.propositions.length)
		
		// test first proposition: bird -> flies
		val prop1 = result.propositions.get(0)
		assertThat(prop1, instanceOf(Implication))
		var impl = prop1 as Implication
		assertThat(impl.left, instanceOf(BooleanVariable))
		val leftBool = impl.left as BooleanVariable
		assertThat(impl.right, instanceOf(BooleanVariable))
		val rightBool = impl.right as BooleanVariable
		Assertions.assertEquals("bird", leftBool.name)
		Assertions.assertEquals("flies", rightBool.name)
		
		// test last proposition by finding an inner bool and type-checking along the way
		val prop6 = result.propositions.get(5)
		assertThat(prop6, instanceOf(Implication))
		impl = prop6 as Implication
		assertThat(impl.right, instanceOf(BooleanLiteral))
		val rightMostBool = impl.right as BooleanLiteral
		assertEquals(BooleanValuesEnum.TRUE, rightMostBool.truth)
		var trav = impl.left as Object
		assertThat(trav, instanceOf(Implication))
		trav = (trav as Implication).left
		assertThat(trav, instanceOf(Disjunction))
		trav = (trav as Disjunction).right
		assertThat(trav, instanceOf(Conjunction))
		trav = (trav as Conjunction).left
		assertThat(trav, instanceOf(Negation))
		trav = (trav as Negation).expression
		assertThat(trav, instanceOf(BooleanVariable))
		val boolName = (trav as BooleanVariable).name
		assertEquals("robin", boolName)
	}
	
	def static String readTestFile(String fileName){
		val reader = new BufferedReader(new InputStreamReader(
			Thread.currentThread().getContextClassLoader().getResourceAsStream(fileName)
		))
		val builder = new StringBuilder();
		var line = "";
		while((line = reader.readLine()) !== null){
			builder.append(line).append("\n")
		}
		return builder.toString()
	}
	
	// credit: https://stackoverflow.com/a/35116799/3900981
	def static String dump(EObject mod_, String indent) {
	    var res = indent + mod_.toString.replaceFirst ('.*[.]impl[.](.*)Impl[^(]*', '$1 ')
	
	    for (a :mod_.eCrossReferences)
	        res += ' ->' + a.toString().replaceFirst ('.*[.]impl[.](.*)Impl[^(]*', '$1 ')
	    res += "\n"
	    for (f :mod_.eContents) {
	        res += f.dump (indent+"   ")
	    }
	    return res
	}
}
