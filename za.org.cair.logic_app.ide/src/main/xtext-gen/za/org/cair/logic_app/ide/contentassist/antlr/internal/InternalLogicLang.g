/*
 * generated by Xtext 2.24.0
 */
grammar InternalLogicLang;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package za.org.cair.logic_app.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package za.org.cair.logic_app.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import za.org.cair.logic_app.services.LogicLangGrammarAccess;

}
@parser::members {
	private LogicLangGrammarAccess grammarAccess;

	public void setGrammarAccess(LogicLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getPropositionsAssignment()); }
		(rule__Model__PropositionsAssignment)*
		{ after(grammarAccess.getModelAccess().getPropositionsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProposition
entryRuleProposition
:
{ before(grammarAccess.getPropositionRule()); }
	 ruleProposition
{ after(grammarAccess.getPropositionRule()); } 
	 EOF 
;

// Rule Proposition
ruleProposition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPropositionAccess().getGroup()); }
		(rule__Proposition__Group__0)
		{ after(grammarAccess.getPropositionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSentence
entryRuleSentence
:
{ before(grammarAccess.getSentenceRule()); }
	 ruleSentence
{ after(grammarAccess.getSentenceRule()); } 
	 EOF 
;

// Rule Sentence
ruleSentence 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSentenceAccess().getEquivalenceParserRuleCall()); }
		ruleEquivalence
		{ after(grammarAccess.getSentenceAccess().getEquivalenceParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEquivalence
entryRuleEquivalence
:
{ before(grammarAccess.getEquivalenceRule()); }
	 ruleEquivalence
{ after(grammarAccess.getEquivalenceRule()); } 
	 EOF 
;

// Rule Equivalence
ruleEquivalence 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEquivalenceAccess().getGroup()); }
		(rule__Equivalence__Group__0)
		{ after(grammarAccess.getEquivalenceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImplication
entryRuleImplication
:
{ before(grammarAccess.getImplicationRule()); }
	 ruleImplication
{ after(grammarAccess.getImplicationRule()); } 
	 EOF 
;

// Rule Implication
ruleImplication 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImplicationAccess().getGroup()); }
		(rule__Implication__Group__0)
		{ after(grammarAccess.getImplicationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDisjunction
entryRuleDisjunction
:
{ before(grammarAccess.getDisjunctionRule()); }
	 ruleDisjunction
{ after(grammarAccess.getDisjunctionRule()); } 
	 EOF 
;

// Rule Disjunction
ruleDisjunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDisjunctionAccess().getGroup()); }
		(rule__Disjunction__Group__0)
		{ after(grammarAccess.getDisjunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConjunction
entryRuleConjunction
:
{ before(grammarAccess.getConjunctionRule()); }
	 ruleConjunction
{ after(grammarAccess.getConjunctionRule()); } 
	 EOF 
;

// Rule Conjunction
ruleConjunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConjunctionAccess().getGroup()); }
		(rule__Conjunction__Group__0)
		{ after(grammarAccess.getConjunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimary
entryRulePrimary
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
		(rule__Primary__Alternatives)
		{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolean
entryRuleBoolean
:
{ before(grammarAccess.getBooleanRule()); }
	 ruleBoolean
{ after(grammarAccess.getBooleanRule()); } 
	 EOF 
;

// Rule Boolean
ruleBoolean 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanAccess().getAlternatives()); }
		(rule__Boolean__Alternatives)
		{ after(grammarAccess.getBooleanAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanVariable
entryRuleBooleanVariable
:
{ before(grammarAccess.getBooleanVariableRule()); }
	 ruleBooleanVariable
{ after(grammarAccess.getBooleanVariableRule()); } 
	 EOF 
;

// Rule BooleanVariable
ruleBooleanVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanVariableAccess().getNameAssignment()); }
		(rule__BooleanVariable__NameAssignment)
		{ after(grammarAccess.getBooleanVariableAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral
:
{ before(grammarAccess.getBooleanLiteralRule()); }
	 ruleBooleanLiteral
{ after(grammarAccess.getBooleanLiteralRule()); } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getTruthAssignment()); }
		(rule__BooleanLiteral__TruthAssignment)
		{ after(grammarAccess.getBooleanLiteralAccess().getTruthAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getBooleanParserRuleCall_0()); }
		ruleBoolean
		{ after(grammarAccess.getPrimaryAccess().getBooleanParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_1()); }
		(rule__Primary__Group_1__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_2()); }
		(rule__Primary__Group_2__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanAccess().getBooleanLiteralParserRuleCall_0()); }
		ruleBooleanLiteral
		{ after(grammarAccess.getBooleanAccess().getBooleanLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanAccess().getBooleanVariableParserRuleCall_1()); }
		ruleBooleanVariable
		{ after(grammarAccess.getBooleanAccess().getBooleanVariableParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__TruthAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getTruthTKeyword_0_0()); }
		'T'
		{ after(grammarAccess.getBooleanLiteralAccess().getTruthTKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getTruthFKeyword_0_1()); }
		'F'
		{ after(grammarAccess.getBooleanLiteralAccess().getTruthFKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Proposition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Proposition__Group__0__Impl
	rule__Proposition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Proposition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropositionAccess().getPropKeyword_0()); }
	'prop'
	{ after(grammarAccess.getPropositionAccess().getPropKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Proposition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Proposition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Proposition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropositionAccess().getSentenceParserRuleCall_1()); }
	ruleSentence
	{ after(grammarAccess.getPropositionAccess().getSentenceParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Equivalence__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equivalence__Group__0__Impl
	rule__Equivalence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equivalence__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquivalenceAccess().getImplicationParserRuleCall_0()); }
	ruleImplication
	{ after(grammarAccess.getEquivalenceAccess().getImplicationParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equivalence__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equivalence__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equivalence__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquivalenceAccess().getGroup_1()); }
	(rule__Equivalence__Group_1__0)*
	{ after(grammarAccess.getEquivalenceAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Equivalence__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equivalence__Group_1__0__Impl
	rule__Equivalence__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equivalence__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquivalenceAccess().getEquivalenceLeftAction_1_0()); }
	()
	{ after(grammarAccess.getEquivalenceAccess().getEquivalenceLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equivalence__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equivalence__Group_1__1__Impl
	rule__Equivalence__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Equivalence__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquivalenceAccess().getLessThanSignHyphenMinusGreaterThanSignKeyword_1_1()); }
	'<->'
	{ after(grammarAccess.getEquivalenceAccess().getLessThanSignHyphenMinusGreaterThanSignKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equivalence__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equivalence__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equivalence__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquivalenceAccess().getRightAssignment_1_2()); }
	(rule__Equivalence__RightAssignment_1_2)
	{ after(grammarAccess.getEquivalenceAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Implication__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Implication__Group__0__Impl
	rule__Implication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Implication__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImplicationAccess().getDisjunctionParserRuleCall_0()); }
	ruleDisjunction
	{ after(grammarAccess.getImplicationAccess().getDisjunctionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Implication__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Implication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Implication__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImplicationAccess().getGroup_1()); }
	(rule__Implication__Group_1__0)*
	{ after(grammarAccess.getImplicationAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Implication__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Implication__Group_1__0__Impl
	rule__Implication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Implication__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImplicationAccess().getImplicationLeftAction_1_0()); }
	()
	{ after(grammarAccess.getImplicationAccess().getImplicationLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Implication__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Implication__Group_1__1__Impl
	rule__Implication__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Implication__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImplicationAccess().getHyphenMinusGreaterThanSignKeyword_1_1()); }
	'->'
	{ after(grammarAccess.getImplicationAccess().getHyphenMinusGreaterThanSignKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Implication__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Implication__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Implication__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImplicationAccess().getRightAssignment_1_2()); }
	(rule__Implication__RightAssignment_1_2)
	{ after(grammarAccess.getImplicationAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Disjunction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Disjunction__Group__0__Impl
	rule__Disjunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisjunctionAccess().getConjunctionParserRuleCall_0()); }
	ruleConjunction
	{ after(grammarAccess.getDisjunctionAccess().getConjunctionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Disjunction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisjunctionAccess().getGroup_1()); }
	(rule__Disjunction__Group_1__0)*
	{ after(grammarAccess.getDisjunctionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Disjunction__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Disjunction__Group_1__0__Impl
	rule__Disjunction__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisjunctionAccess().getDisjunctionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getDisjunctionAccess().getDisjunctionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Disjunction__Group_1__1__Impl
	rule__Disjunction__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisjunctionAccess().getVerticalLineKeyword_1_1()); }
	'|'
	{ after(grammarAccess.getDisjunctionAccess().getVerticalLineKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Disjunction__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisjunctionAccess().getRightAssignment_1_2()); }
	(rule__Disjunction__RightAssignment_1_2)
	{ after(grammarAccess.getDisjunctionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Conjunction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conjunction__Group__0__Impl
	rule__Conjunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConjunctionAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
	{ after(grammarAccess.getConjunctionAccess().getPrimaryParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conjunction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConjunctionAccess().getGroup_1()); }
	(rule__Conjunction__Group_1__0)*
	{ after(grammarAccess.getConjunctionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Conjunction__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conjunction__Group_1__0__Impl
	rule__Conjunction__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConjunctionAccess().getConjunctionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getConjunctionAccess().getConjunctionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conjunction__Group_1__1__Impl
	rule__Conjunction__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConjunctionAccess().getAmpersandKeyword_1_1()); }
	'&'
	{ after(grammarAccess.getConjunctionAccess().getAmpersandKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conjunction__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConjunctionAccess().getRightAssignment_1_2()); }
	(rule__Conjunction__RightAssignment_1_2)
	{ after(grammarAccess.getConjunctionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__0__Impl
	rule__Primary__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getNegationAction_1_0()); }
	()
	{ after(grammarAccess.getPrimaryAccess().getNegationAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__1__Impl
	rule__Primary__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getTildeKeyword_1_1()); }
	'~'
	{ after(grammarAccess.getPrimaryAccess().getTildeKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getExpressionAssignment_1_2()); }
	(rule__Primary__ExpressionAssignment_1_2)
	{ after(grammarAccess.getPrimaryAccess().getExpressionAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_2__0__Impl
	rule__Primary__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_2_0()); }
	'('
	{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_2__1__Impl
	rule__Primary__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getEquivalenceParserRuleCall_2_1()); }
	ruleEquivalence
	{ after(grammarAccess.getPrimaryAccess().getEquivalenceParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_2_2()); }
	')'
	{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__PropositionsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getPropositionsPropositionParserRuleCall_0()); }
		ruleProposition
		{ after(grammarAccess.getModelAccess().getPropositionsPropositionParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equivalence__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEquivalenceAccess().getRightImplicationParserRuleCall_1_2_0()); }
		ruleImplication
		{ after(grammarAccess.getEquivalenceAccess().getRightImplicationParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Implication__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImplicationAccess().getRightDisjunctionParserRuleCall_1_2_0()); }
		ruleDisjunction
		{ after(grammarAccess.getImplicationAccess().getRightDisjunctionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDisjunctionAccess().getRightConjunctionParserRuleCall_1_2_0()); }
		ruleConjunction
		{ after(grammarAccess.getDisjunctionAccess().getRightConjunctionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConjunctionAccess().getRightPrimaryParserRuleCall_1_2_0()); }
		rulePrimary
		{ after(grammarAccess.getConjunctionAccess().getRightPrimaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__ExpressionAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_1_2_0()); }
		rulePrimary
		{ after(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanVariable__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanVariableAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getBooleanVariableAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__TruthAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getTruthAlternatives_0()); }
		(rule__BooleanLiteral__TruthAlternatives_0)
		{ after(grammarAccess.getBooleanLiteralAccess().getTruthAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
